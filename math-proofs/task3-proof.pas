{N >= 0}
	i, x := 0, 0;
{inv P: 0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))}
{bound t: N - i}

	do i < N -> if even(i) & odd(a[i])   -> x, i := x + 1, i + 1
		       |!((even) & odd(a[i)) -> i := i + 1
		    fi
	od
	
{R: x = (N_j: 0 <= j < i: even(i) & odd(a[j]))}

1) Q ==> WP(I, P)

	N >= 0 ==> WP(i, x := 0,0 , 0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])))
	// выполним подстановку:
	N >= 0 ==> 0 <= 0 & 0 <= N & 0 = (N_j: 0 <= j < 0: even(i) & odd(a[j]))
	// 0 <= 0 является TRUE
	// а 0 <= j < 0 в кванторе количества дает false, а значит квантор возвращает 0
	N >= 0 ==> N >= 0 & 0 = 0
	// 0 = 0 является TRUE:
	N >= 0 ==> N >= 0
	/*---------------
	* a ==> a
	* !a v a 	// по закону импликации
	* TRUE 		// по закону исключения третьего
	*----------------
	TRUE // по a ==> a

2) P & B ==> WP(S, P)

	P & i < N ==> WP(IF, P) // Возьмём консеквент импликации
	WP(IF, P) ==> domain(B1 v B2) & (B1 v B2) & (B1 ==> WP(S1, P)) & (B2 ==> WP(S2, P))
	domain((even(i) & odd(a[i])) v (!((even) & odd(a[i)))) 
		& ((even(i) & odd(a[i])) v (!((even) & odd(a[i)))) 
		& (B1 ==> WP(S1, P)) & (B2 ==> WP(S2, P))
	// (even(i) & odd(a[i])) v (!((even) & odd(a[i))) ==> TRUE по закону исключения третьего
	domain(TRUE) & TRUE & (B1 ==> WP(S1, P)) & (B2 ==> WP(S2, P))
	// domain(TRUE) тоже является TRUE, получим:
	(B1 ==> WP(S1, P)) & (B2 ==> WP(S2, P))
	// распишем выражение:
	(even(i) & odd(a[i])) ==> WP(x, i := x + 1, i + 1,
		0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])))
	& (!((even) & odd(a[i))) ==> WP(i := i + 1,
		0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])))
	// выполняем команду подстановки в предикат P:
	(even(i) & odd(a[i])) ==> -1 <= i < N & (x + 1) = (N_j: 0 <= j <= i: even(i) & odd(a[j]))
	& (!((even) & odd(a[i))) ==> -1 <= i < N & x = (N_j: 0 <= j <= i: even(i) & odd(a[j]))
	// из первого квантора количества выносим 1 элемент и изменяем область j на 0 <= j < i
	// из второго квантора количества выносим 0 элемент и изменяем область j на 0 <= j < i, так как
	// элемент посылки не является even(i) & odd(a[i]), тем который нам нужен
	(even(i) & odd(a[i])) ==> -1 <= i < N & (x + 1) = (N_j: 0 <= j < i: even(i) & odd(a[j])) + 1
	& (!((even) & odd(a[i))) ==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])) + 0
	// сокращаем единицы в уравнении с первым квантором и получить, что правые части импликаций равны
	(even(i) & odd(a[i])) ==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	& (!((even) & odd(a[i))) ==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	// обозначим левую часть через alpha, а правую через beta и докажем
	(a ==> b) & (!a ==> b)
	/*-----------------------------------------------------
	*	(a ==> b) & (!a ==> b)	
	*	(!a v b) & (a v b)
	*	(!a & a) v b
	*	// (!a & a) = FALSE по закону противоречия
	*	FALSE v b
	*	b  // по закону упрощения дизьюнкции
	*-----------------------------------------------------*/
	// по (a ==> b) & (!a ==> b) ==> b останется только правая часть импликации:
	WP(IF, P) ==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	// вернёмся к исходному выражению P & i < N ==> WP(IF, P)
	0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])) & i < N
		==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	// объединим 0 <= i <= N и i < N, получим:
	0 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
		==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	// правую часть распишем по закону дистрибутивности, добавляя еще один дизьюнкт:
	0 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
		==> -1 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	0 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
		==> 0 <= i < N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
			v (i = -1 & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	// получим, что один из дизьюнктов консеквента однозначно равен антецеденту выражения
	// и поэтому по НЛЛ 2 a => a v b мы получаем:
	TRUE

3) P & !BB ==> R
	
	0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])) & !(i < N) 
		==> x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	// объединим 0 <= i <= N и i >= N, получим:
	i >= 0 & i = N & x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
		==> x = (N_j: 0 <= j < i: even(i) & odd(a[j]))
	TRUE // по НЛЛ 1: a & b => a

4) P & BB ==> t > 0

	0 <= i <= N & x = (N_j: 0 <= j < i: even(i) & odd(a[j])) & i < N ==> N - i > 0
	// объединим 0 <= i <= N и i < N, получим:
	i < N & i >= 0 & x = (N_j: 0 <= j < i: even(i) & odd(a[j])) ==> i < N
	// получаем, что один из коньюнктов левой части однозначно совпадает с консеквентом импликации
	// значит применяем НЛЛ 1: a & b => a
	TRUE

5) P & B1 ==> WP("t0:= t, S1", t < t0)

	// распишем консеквент импликации
	WP("t0:= N - i, IF", N - i < t0)
	// по команде последовательности получим:
	WP(t0:= N - i, WP(IF, N - i < t0))
	// распишем выражение, в которое будем выполнять подстановку
	WP(IF, N - i < t0) ==> domain((even(i) & odd(a[i])) v (!((even) & odd(a[i)))) 
		& ((even(i) & odd(a[i])) v (!((even) & odd(a[i)))) 
		& (even(i) & odd(a[i]) ==> WP(S1, N - i < t0)) & (!(even(i) & odd(a[i])) ==> WP(S2, N - i < t0))
	// первые 2 коньюнкта domain(BB) и BB становяться TRUE и мы получим:
	(even(i) & odd(a[i]) ==> WP(x, i := x + 1, i + 1, N - i < t0)) 
		& (!(even(i) & odd(a[i])) ==> WP(i := i + 1, N - i < t0))
	// выполняем подстановку:
	(even(i) & odd(a[i]) ==> N - i - 1 < t0) 
		& (!(even(i) & odd(a[i])) ==> N - i - 1 < t0)
	// получаем, что правые части импликаций равны
	// воспользуемся ранее доказанной лемой (a ==> b) & (!a ==> b) ==> b и получим:
	WP(IF, N - i < t0) ==> N - i - 1 < t0
	// вернёмся к исходному выражению
	P & B1 ==> WP(t0:= N - i, N - i - 1 < t0)
	// выполняем подстановку
	P & B1 ==> N - i - 1 < N - i
	// консеквент является TRUE:
	P & B1 ==> TRUE
	// докажем a ==> TRUE
	/*----------------
	*	a ==> TRUE
	*	!a v TRUE
	*	TRUE // по закону упрощения дизьюнкции
	*-----------------*/
	// окончательно получим по a ==> TRUE
	TRUE
